/* $Id$
 * Author: Luis Colorado <lc@luiscoloradosistemas.com
 * Date: 19 de jun. de 2016 18:06:00.
 * Project: LadyAugustaAda
 * Package: es.lcssl.irc.transactions
 * Disclaimer: (C) 2016 LUIS COLORADO.  All rights reserved.
 */
package es.lcssl.irc.transactions;

/**
 * All the Exceptions generated by this package are derived from this class.
 *
 * @author Luis Colorado {@code <lc@luiscoloradosistemas.com>}
 */
public class TransactionException extends Exception {

	private static final long serialVersionUID = 3220841893515729690L;

	/**
	 * Constructs a new exception with {@code null} as its detail message. The
	 * {@code cause} is not initialized, and may subsequently be initialized by
	 * a call to {@link #initCause(Throwable)}.
	 * 
	 * @see Exception#Exception()
	 */
	public TransactionException() {
	}

	/**
	 * Constructs a new exception with the specified detail {@code message}. The
	 * {@code cause} is not initialized, and may subsequently be initialized by
	 * a call to {@link #initCause(Throwable)}.
	 * 
	 * @param message
	 *            the detail {@code message}. The detail {@code message} is
	 *            saved for later retrieval by the {@link #getMessage()} method.
	 * 
	 * @see Exception#Exception(String)
	 */
	public TransactionException(String message) {
		super(message);
	}

	/**
	 * Constructs a new exception with the specified {@code cause} and a detail
	 * {@code message} of {@code (cause==null ? null : cause.toString())} (which
	 * typically contains the class and detail {@code message} of {@code cause}
	 * ). This constructor is useful for exceptions that are little more than
	 * wrappers for other throwables (for example,
	 * {@link java.security.PrivilegedActionException}).
	 * 
	 * @param cause
	 *            the {@code cause} (which is saved for later retrieval by the
	 *            {@link #getCause()} method). (A {@code null} value is
	 *            permitted, and indicates that the {@code cause} is nonexistent
	 *            or unknown.)
	 * 
	 * @see Exception#Exception(Throwable)
	 */
	public TransactionException(Throwable cause) {
		super(cause);
	}

	/**
	 * Constructs a new exception with the specified detail {@code message} and
	 * {@code cause}.
	 * 
	 * <p>
	 * Note that the detail {@code message} associated with {@code cause} is not
	 * automatically incorporated in this exception's detail {@code message}.
	 * 
	 * @see Exception#Exception(String, Throwable)
	 */
	public TransactionException(String message, Throwable cause) {
		super(message, cause);
	}
}
